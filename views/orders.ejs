<%-include("header.ejs")%>




    <div class="container" id="order-container">
        <div class="d-flex justify-content-center row">
            <div class="col-md-12">
                <div class="rounded">
                    <div class="table-responsive table-borderless">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th class="text-center">

                                        <div class="inner-circle"></div>
                    </div>
                    </th>
                    <th>Order #</th>
                    <th>Products</th>
                    <th>status</th>
                    <th>Total</th>
                    <th>Payment Method</th>
                    <th>Created</th>
                    <th></th>
                    <th></th>
                    </tr>
                    </thead>
                    <% if (userOrders.length > 0) { %>
                
                    <% userOrders.forEach(order=>{%>


                        <tbody class="table-body">
                            <tr class="cell-1">
                                <td class="text-center">

                                    <div class="inner-circle"></div>
                </div>
                </td>
                
                <td>
                    <%=order.orderId%>
                </td>
                <td>
                    <% order.items.forEach((item, index)=> { %>
                        --<%= item.product.productName %>
                            <% if (index < order.items.length - 1) { %>
                                <br>
                                <% } %>
                                    <% }); %>
                </td>
                <td>
                    <p id="status-<%= order._id %>" class="order-status"><%= order.OrderStatus %></p>
                </td>
                <td>â‚¹<%=order.totalAmount%>
                </td>
                <td><%=order.paymentMethod%>
                </td>
                <td>
                    <%=order.orderDate.toLocaleDateString()%>
                </td>
                
                <!-- Inside your table row for each order -->
                <!-- Inside your table row for each order -->
<td>
    <% if (order.OrderStatus === 'Shipped' || order.OrderStatus === 'Order Placed') { %>
        <!-- Order content here -->
        <div id="order-<%= order._id %>" class="order">
            <p id="message-<%= order._id %>" class="success-message" style="display: none;">Order Cancelled</p>
            
            <!-- Cancel Order Button with Modal Trigger -->
            <button type="button" class="cancel-order-button" data-toggle="modal" data-target="#cancelModal-<%= order._id %>">Cancel Order</button>
            
            <!-- Cancel Order Modal -->
            <div class="modal fade" id="cancelModal-<%= order._id %>" tabindex="-1" role="dialog" aria-labelledby="cancelModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="cancelModalLabel">Cancel Order</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <!-- Form for providing cancellation reason -->
                            <form id="cancelForm-<%= order._id %>">
                                <div class="form-group">
                                    <label for="cancellationReason">Reason for Cancellation:</label>
                                    <textarea class="form-control" id="cancellationReason-<%= order._id %>"  name="cancellationReason" rows="3" required></textarea>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary" onclick="cancelOrderWithReason('<%= order._id %>')">Confirm Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    <% } else if (order.OrderStatus === 'Delivered') { %>
        <!-- Order content here -->
        <div id="return-order-<%= order._id %>" class="order">
            <p id="return-message-<%= order._id %>" class="success-message" style="display: none;">Order Returned</p>

            <% if (order.deliveredAt) { %>
                <% const twoDaysAfterDelivery = new Date(order.deliveredAt); %>
                <% twoDaysAfterDelivery.setDate(twoDaysAfterDelivery.getDate() + 2); %>
                <% if (new Date() <= twoDaysAfterDelivery) { %>
                    <button type="button" class="return-order-button" id="return-btn-<%= order._id %>" onclick="returnOrder('<%= order._id %>')">Return Order</button>
                <% } else { %>
                    <!-- Return is expired, hide the button -->
                    <span class="text-warning">Return Expired</span>
                <% } %>
            <% } else { %>
                <!-- Handle case where deliveredAt is not set -->
                <span class="text-warning">Delivered date not available</span>
            <% } %>
            
        </div>
    <% } else if (order.OrderStatus === 'Returned') { %>
        <span class="text-warning">Order Returned</span>
    <% } else if (order.OrderStatus === 'Cancelled') { %>
        <span class="text-danger">Order Cancelled</span>
    <% } %>
</td>

                <td>
                   <a class="btn btn-light border-1" href="/order-details/<%=order._id%>">View More</a>
                   
                </td>

                </tr>
                
                <%})%>
                <%}else{%>
                    <p class="text-center bg-danger">No orders found.</p>
                    <%}%>
                    
                    </tbody>
                    
                    </table>
                    
            </div>
        </div>
        <div class="pagination-container">
            <ul class="pagination mb-3">
                <% for (let i = 1; i <= totalPages; i++) { %>
                    <li class="<%= currentPage === i ? 'active' : '' %>">
                        <a href="/orders?page=<%= i %>"><%= i %></a>
                    </li>
                <% } %>
            </ul>
        </div>
    </div>
    </div>
    </div>


    <script>
//         function cancelOrder(orderId) {
//     // Show a confirmation dialog
//     Swal.fire({
//         title: 'Are you sure?',
//         text: 'You won\'t be able to revert this!',
//         icon: 'warning',
//         showCancelButton: true,
//         confirmButtonColor: '#3085d6',
//         cancelButtonColor: '#d33',
//         confirmButtonText: 'Yes, cancel it!',
//         cancelButtonText: 'No'
//     }).then((result) => {
//         if (result.isConfirmed) {
//             // User clicked "Yes, cancel it!"
//             // Proceed with order cancellation
//             fetch(`/orders/${orderId}`, {
//                 method: "POST",
//                 headers: {
//                     'Content-Type': "application/json"
//                 }
//             })
//             .then(response => response.json())
//             .then(data => {
//                 const statusElement = document.getElementById(`status-${orderId}`);
//                 const messageElement = document.getElementById(`message-${orderId}`);
//                 const button = document.getElementById(`cancel-btn-${orderId}`);

//                 if (data.success) {
//                     // Order cancellation was successful
//                     Swal.fire({
//                         icon: 'success',
//                         title: 'Order Cancelled',
//                         text: 'Your Order has been Cancelled.',
//                         timer: 1000,
//                         showCancelButton: false,
//                         showConfirmButton: false
//                     });

//                     // Update the text content and style of the status element
//                     if (statusElement) {
//                         statusElement.textContent = 'Order Cancelled';
//                         statusElement.style.color = 'red';
//                     }

//                     // Show the success message element
//                     if (messageElement) {
//                         messageElement.style.display = 'block'; // or 'inline', 'flex', etc.
//                         messageElement.style.color = 'red';
//                     }

//                     // Hide the button
//                     button.style.display = "none";
//                 } else {
//                     // Order cancellation failed
//                     console.error('Error cancelling order:', data.error);
//                 }
//             })
//             .catch(error => {
//                 console.error('Error:', error.message);
//             });
//         }
//         // else: User clicked "No" or closed the dialog, do nothing
//     });
// }


function cancelOrderWithReason(orderId) {
    console.log('Cancel Order Button Clicked. Order ID:', orderId);

    const cancellationReasonElement = document.getElementById(`cancellationReason-${orderId}`);
    const messageElement = document.getElementById(`message-${orderId}`);

    if (cancellationReasonElement) {
        const cancellationReason = cancellationReasonElement.value;
        console.log('Cancellation Reason:', cancellationReason);

        // Check if there is a cancellation reason
        if (cancellationReason.trim() !== '') {
    // Perform the cancellation logic with the reason
    fetch(`/orders/${orderId}`, {
        method: "POST",
        headers: {
            'Content-Type': "application/json"
        },
        body: JSON.stringify({ cancellationReason })
    })
    .then(response => response.json())
    .then(data => {
        const statusElement = document.getElementById(`status-${orderId}`);
        const messageElement = document.getElementById(`message-${orderId}`);
        const button = document.getElementById(`cancel-btn-${orderId}`);
        const modal = $(`#cancelModal-${orderId}`);


        if (data.success) {
            // Close the modal
            modal.modal('hide');
            console.log('Redirecting to /orders');
        window.location.href = '/orders';
            // Order cancellation was successful
            Swal.fire({
                icon: 'success',
                title: 'Order Cancelled',
                text: 'Your Order has been Cancelled.',
                timer: 1000,
                showCancelButton: false,
                showConfirmButton: false
            });

            // Update the text content and style of the status element
            if (statusElement) {
                statusElement.textContent = 'Order Cancelled';
                statusElement.style.color = 'red';
            }

            // Show the success message element
            if (messageElement) {
                messageElement.style.display = 'block'; // or 'inline', 'flex', etc.
                messageElement.style.color = 'red';
            }

            // Hide the button
            button.style.display = "none";

            
            

        } else {
            // Order cancellation failed
            console.error('Error cancelling order:', data.error);
        }
    })
    .catch(error => {
        console.error('Error:', error.message);
    });
    messageElement.textContent = 'Order Cancelled';
            messageElement.style.display = 'block'; // or 'inline', 'flex', etc.
            messageElement.style.color = 'red';

            // Close the modal
            $(`#cancelModal-${orderId}`).modal('hide');
        } else {
            console.warn('Cancellation reason is required.');
        }
    } else {
        console.error('Element with ID not found:', `cancellationReason-${orderId}`);
    }
}



        function returnOrder(orderId){
            Swal.fire({
        title: 'Are you sure?',
        text: 'You won\'t be able to revert this!',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, return it!',
        cancelButtonText: 'No'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/orders-return/${orderId}`,{
                method:"POST",
                headers:{
                    'Content-Type':"application/json"
                }
            })
            .then(response=>response.json())
            .then(data=>{
                const statusElement = document.getElementById(`status-${orderId}`);
                const messageElement = document.getElementById(`return-message-${orderId}`);
                const button = document.getElementById(`return-btn-${orderId}`);
                if(data.success){
                    Swal.fire({
                          icon: 'success',
                          title: 'Order Returned',
                          text: 'Your Order has been Returned.',
                          timer: 1000,
                          showCancelButton: false,
                          showConfirmButton: false
                        })
                    console.log("returned Successfully")
                    statusElement.textContent = 'Returned';
                        statusElement.style.color = 'Black';
                        messageElement.style.display = 'block'; // or 'inline', 'flex', etc.
                        messageElement.style.color = 'red';
                        button.style.display = "none";

                } else {
                    // Order cancellation failed
                    console.error('Error cancelling order:', data.error);
                }
            })
            .catch(error => {
                console.error('Error:', error.message);
            });
        }
        })
    }
        





    </script>
    

<%-include('footer.ejs')%>